devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
devtools::document()
devtools::document()
library(infomapecology)
infomapR('ninetriangles.net')
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
infomapecology::timesTwo(5)
devtools::document()
devtools::document()
devtools::document()
library(infomapecology)
infomapecology::timesTwo(4)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(infomapecology)
library(infomapecology)
devtools::document()
library(infomapecology)
timesTwo(5)
devtools::document()
compileAttributes()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
compileAttributes()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
library(infomapecology)
timesTwo(4)
devtools::document()
library(infomapecology)
timesTwo(4)
library(igraph)
library(infomapecology)
# Simple bipartite network ------------------------------------------------
network_object <- create_network_object(memmott1999, bipartite = T, directed = F, group_names = c('A','P'))
# library(igraph)
library(bipartite)
# Simple bipartite network ------------------------------------------------
network_object <- create_network_object(memmott1999, bipartite = T, directed = F, group_names = c('A','P'))
infomap_input <- create_infomap_linklist(network_object)
infomap_object <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'undirected',
silent=T, trials=20, two_level=T, seed=123)
otago_nodes <- read_csv('Otago_Data_Nodes.csv')
library(tidyverse)
otago_nodes <- read_csv('Otago_Data_Nodes.csv')
otago_links <- read_csv('Otago_Data_Links.csv')
save(otago_nodes, file="data/otago_nodes.RData")
save(otago_links, file="data/otago_links.RData")
devtools::document()
library(infomapecology)
# library(igraph)
library(bipartite)
library(tidyverse)
# library(magrittr)
# library(cowplot)
# library(ggalluvial)
library(infomapecology)
# Simple bipartite network ------------------------------------------------
network_object <- create_network_object(memmott1999, bipartite = T, directed = F, group_names = c('A','P'))
infomap_input <- create_infomap_linklist(network_object)
infomap_object <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'undirected',
silent=T, trials=20, two_level=T, seed=123)
# Directed food web with hierarchical clustering --------------------------
# Prepare data
otago_nodes <- read_csv('Otago_Data_Nodes.csv') %>%
filter(StageID==1) %>%
select(node_name=WorkingName, node_id_original=NodeID, WorkingName,StageID, everything())
otago_nodes <- data("otago_nodes")
otago_nodes
otago_nodes
data(otago_nodes)
otago_nodes
data(otago_links)
otago_nodes
otago_nodes %>%
filter(StageID==1) %>%
select(node_name=WorkingName, node_id_original=NodeID, WorkingName,StageID, everything())
otago_nodes %<>%
filter(StageID==1) %>%
select(node_name=WorkingName, node_id_original=NodeID, WorkingName,StageID, everything())
otago_nodes
otago_links %<>%
filter(ConsumerSpecies.StageID==1) %>%
filter(ResourceSpecies.StageID==1) %>%
select(from=ResourceNodeID, to=ConsumerNodeID) %>%
left_join(otago_nodes, by=c('from'='node_id_original')) %>%
select(from, node_name, to) %>%
left_join(otago_nodes, by=c('to'='node_id_original')) %>%
select(from=node_name.x, to=node_name.y) %>%
mutate(weight=1)
otago_links
data(otago_links)
otago_links
# Directed food web with hierarchical clustering --------------------------
# Prepare data
data(otago_nodes)
data(otago_links)
otago_nodes %<>%
filter(StageID==1) %>%
select(node_name=WorkingName, node_id_original=NodeID, WorkingName,StageID, everything())
anyDuplicated(otago_nodes$node_name)
otago_links %<>%
filter(ConsumerSpecies.StageID==1) %>%
filter(ResourceSpecies.StageID==1) %>%
select(from=ResourceNodeID, to=ConsumerNodeID) %>%
left_join(otago_nodes, by=c('from'='node_id_original')) %>%
select(from, node_name, to) %>%
left_join(otago_nodes, by=c('to'='node_id_original')) %>%
select(from=node_name.x, to=node_name.y) %>%
mutate(weight=1)
# Prepare network objects and run infomap
network_object <- create_network_object(otago_links, directed = T, bipartite = F, node_metadata = otago_nodes)
infomap_input <- create_infomap_linklist(network_object)
infomap_object <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=F, seed=200952)
infomap_object$module_affiliation %>%
select(node_id, node_name, module_level1, module_level2,module_level3, OrganismalGroup, NodeType) %>%
arrange(module_level1, module_level2,module_level3)
# Create an attribute -- attribute ID map
node_attribute_map <- otago_nodes %>% distinct(OrganismalGroup) %>%
mutate(attribute_id=1:n())
# Create a file with node attributes
node_attributes <-
infomap_input$nodes %>%
distinct(node_id, OrganismalGroup) %>%
left_join(node_attribute_map) %>%
select(-OrganismalGroup) %>%
write_delim('otago_node_attributes.txt', delim = ' ', col_names = F)
# Run without metadata
infomap_object <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952)
# Run with metadata and eta=0.7
infomap_object_metadata_07 <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952,
'--meta-data otago_node_attributes.txt --meta-data-rate 0.7')
# Run with metadata and eta=1.3
infomap_object_metadata_13 <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952,
'--meta-data otago_node_attributes.txt --meta-data-rate 1.3')
# Compare the modules with and without metadata
x <- infomap_object$module_affiliation %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=0) %>%
arrange(desc(n), module_level1)
y <- infomap_object_metadata_07$module_affiliation %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=0.7) %>%
arrange(desc(n), module_level1)
z <- infomap_object_metadata_13$module_affiliation %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=1.25) %>%
arrange(desc(n), module_level1)
bind_rows(x,y, z) %>% ggplot(aes(n, fill=as.factor(eta)))+geom_histogram(position = 'dodge')+
scale_fill_manual(values = c('purple','orange','brown'))+
labs(x='Number of organismal groups', y='Number of modules', fill='eta')+
theme(legend.position = c(0.8,0.8),
legend.text = element_text(size=20),
legend.title = element_text(size=20),
axis.text = element_text(size=30),
text=element_text(size=30))
num_mods <- max(infomap_object$module_affiliation$module_level1)
num_mods_metadata_07 <- max(infomap_object_metadata_07$module_affiliation$module_level1)
cowplot::plot_grid(
infomap_object$module_affiliation %>% group_by(module_level1, OrganismalGroup) %>% arrange(module_level1, OrganismalGroup) %>%
count() %>%
ggplot(aes(module_level1, OrganismalGroup, size=n))+geom_point(color='purple')+
scale_size_area(max_size = 20)+
scale_x_continuous(breaks = 1:num_mods)+
labs(x='Module ID', y='Guild', title='Eta=0')+
theme(legend.position = 'none'),
infomap_object_metadata_07$module_affiliation %>% group_by(module_level1, OrganismalGroup) %>% arrange(module_level1, OrganismalGroup) %>%
count() %>%
ggplot(aes(module_level1, OrganismalGroup, size=n))+
geom_point(color='orange')+
scale_size_area(max_size = 20)+
labs(x='Module ID', y='Guild', title='Eta=0.7')+
scale_x_continuous(breaks = seq(1,num_mods_metadata_07,3))+
theme(legend.position = 'none'),
align = 'vh')
data(tur2016)
tur2016
tur2016 %<>% filter(altitude==2000) %>% select(from=donor,to=receptor,weight=no.grains)
network_object <- create_network_object(tur2016, directed = T, bipartite = F)
infomap_input <- create_infomap_linklist(network_object)
res_dir <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
res_rawdir <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'rawdir',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
res_dir <- res_dir$module_affiliation
res_rawdir <- res_rawdir$module_affiliation
devtools::document()
# library(igraph)
library(bipartite)
library(tidyverse)
# library(magrittr)
# library(cowplot)
# library(ggalluvial)
library(infomapecology)
library(infomapecology)
data(tur2016)
tur2016 %<>% filter(altitude==2000) %>% select(from=donor,to=receptor,weight=no.grains)
network_object <- create_network_object(tur2016, directed = T, bipartite = F)
infomap_input <- create_infomap_linklist(network_object)
res_dir <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
res_rawdir <- run_infomap_link_list(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'rawdir',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
res_dir <- res_dir$module_affiliation
res_rawdir <- res_rawdir$module_affiliation
# Compare the results
N <- res_dir %>% @ Create confusion matrix
# Compare the results
N <- res_dir %>% # Create confusion matrix
select(-module_level2) %>%
inner_join(res_rawdir %>% select(node_id,module_level1), by='node_id') %>%
arrange(module_level1.x,module_level1.y) %>%
# mutate(same_module=ifelse(module_level1.x==module_level1.y,1,0)) %>%
# group_by(same_module) %>% count()
group_by(module_level1.y) %>% select(module_level1.x) %>% table()
# ggplot()+geom_point(aes(module_level1.x, module_level1.y, color=node_name), size=3, position = 'jitter')
N
# These two different modes of flow can result in different partitions.
NMI(N)
res_dir %>%
select(-module_level2) %>%
inner_join(res_rawdir %>% select(node_id,module_level1), by='node_id') %>%
arrange(module_level1.x,module_level1.y) %>%
group_by(module_level1.x,module_level1.y) %>% count() %>%
ggplot()+geom_point(aes(module_level1.x, module_level1.y, color=n), size=15)+scale_color_viridis_c()+
scale_x_continuous(breaks=1:max(res_dir$module_level1))+
scale_y_continuous(breaks=1:max(res_rawdir$module_level1))+
labs(x='Module ID directed model', y='Module ID rawdir model')+
theme_bw()+theme(text=element_text(size=30), panel.grid.minor = element_blank())
mod_cols <- tibble(module_level1=sort(unique(res_dir$module_level1)), col=gg_color_hue(max(as.integer(res_dir$module_level1))))
# Plot the networks
gg_color_hue <- function(n, hue_min = 10, hue_max = 280, tune1 = 62, tune2 = 100) {
hues = seq(hue_min, hue_max, length=n+1)
hcl(h=hues, l=tune1, c=tune2)[1:n]
}
mod_cols <- tibble(module_level1=sort(unique(res_dir$module_level1)), col=gg_color_hue(max(as.integer(res_dir$module_level1))))
res_dir %<>% left_join(mod_cols)
library(magrittr)
library(magrittr)
# Plot the networks
gg_color_hue <- function(n, hue_min = 10, hue_max = 280, tune1 = 62, tune2 = 100) {
hues = seq(hue_min, hue_max, length=n+1)
hcl(h=hues, l=tune1, c=tune2)[1:n]
}
mod_cols <- tibble(module_level1=sort(unique(res_dir$module_level1)), col=gg_color_hue(max(as.integer(res_dir$module_level1))))
res_dir %<>% left_join(mod_cols)
g <- network_object$igraph_object
all(V(g)$name==res_dir$node_name)
V(g)$node_id <- res_dir$node_id
V(g)$col <- res_dir$col
library(igraph)
library(igraph)
library(bipartite)
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggalluvial)
library(infomapecology)
g <- network_object$igraph_object
all(V(g)$name==res_dir$node_name)
V(g)$node_id <- res_dir$node_id
V(g)$col <- res_dir$col
V(g)$membership <- res_dir$module_level1
plot(network_object$igraph_object, vertex.label=NA, edge.color='black',
edge.width=log(E(g)$weight+1),
vertex.color=V(g)$col, layout=layout.circle, main='directed')
mod_cols <- tibble(module_level1=sort(unique(res_rawdir$module_level1)), col=gg_color_hue(max(as.integer(res_rawdir$module_level1))))
res_rawdir %<>% left_join(mod_cols)
g <- network_object$igraph_object
all(V(g)$name==res_rawdir$node_name)
V(g)$node_id <- res_rawdir$node_id
V(g)$col <- res_rawdir$col
V(g)$membership <- res_rawdir$module_level1
plot(network_object$igraph_object, vertex.label=NA, edge.color='black',
edge.width=log(E(g)$weight+1),
vertex.color=V(g)$col, layout=layout.circle, main='rawdir')
check_infomap <- function(x='Infomap'){
if (file.exists(x)){
system('./Infomap -V')
} else {
print('Cannot find Infomap. See www.mapequation.org for instructions on how to install.')
}
}
check_infomap()
out <- tryCatch((system('./Infomap -V')))
print(out)
out <- tryCatch((system('./Infomp -V')))
print(out)
out <- tryCatch({system('./Infomp -V')})
print(out)
install.packages("attempt")
library(attempt)
out <- attempt({system('./Infomp -V')})
out
out <- attempt(system('./Infomp -V'), msg = 'Infomap not installed correctly')
out <- attempt(system('./Infomap -V'), msg = 'Infomap not installed correctly')
check_infomap <- function(x='Infomap'){
attempt(system('./Infomp -V'), msg = 'Infomap not installed correctly. See www.mapequation.org for instructions on how to install.')
}
check_infomap
check_infomap()
check_infomap <- function(x='Infomap'){
attempt(system(paste('./',x,' -V',sep='')), msg = 'Infomap not installed correctly. See www.mapequation.org for instructions on how to install.')
}
check_infomap()
out <- attempt(system(paste('./',x,' -V',sep='')), msg = 'Infomap not installed correctly. See www.mapequation.org for instructions on how to install.')
check_infomap <- function(x='Infomap'){
out <- attempt(system(paste('./',x,' -V',sep='')), msg = 'Infomap not installed correctly. See www.mapequation.org for instructions on how to install.')
}
check_infomap()
check_infomap('in')
check_infomap()
nodes_data
#Run infomap
system('./Infomap NEE2017_multilayer_full_list.txt . -2 --seed 497294 -N 100 -i multilayer -f directed --silent')
#Read infomap's output file
interlayer_modules <- suppressMessages(read_delim('NEE2017_multilayer_full_list_states.tree', delim = ' ', skip = 2, col_names = c('path', 'flow', 'name', 'stateId', 'node_id', 'layer')))
#Run infomap
system('./Infomap NEE2017_multilayer_full_list.txt . -2 --seed 497294 -N 100 -i multilayer -f directed --silent')
#Read infomap's output file
interlayer_modules <- suppressMessages(read_delim('NEE2017_multilayer_full_list_states.tree', delim = ' ', skip = 2, col_names = c('path', 'flow', 'name', 'stateId', 'node_id', 'layer')))
#Read infomap's output file
interlayer_modules <- suppressMessages(read_delim('NEE2017_multilayer_full_list_states.tree', delim = ' ', skip = 6, col_names = c('path', 'flow', 'name', 'stateId', 'node_id', 'layer')))
#Read infomap's output file
interlayer_modules <- suppressMessages(read_delim('NEE2017_multilayer_full_list_states.tree', delim = ' ', skip = 7, col_names = c('path', 'flow', 'name', 'stateId', 'node_id', 'layer')))
interlayer_modules
interlayer_modules %<>%
filter(flow>0) %>%
select(path, node_id, layer) %>%
separate(col = path, into = c("module", 'leaf'), sep = ":") %>%
mutate(module=as.integer(module))
#Add nodes data
nodes_data <- read_csv("NEE2017_nodes.csv")
#Add nodes data
nodes_data <- read_csv("NEE2017_nodes.csv")
nodes_data
extended=1
intra=2
extended=tibble(layer_from=1, node_from=1, layer_to=1, node_to=2, weight=1)
extended %>% filter(layer_from==layer_to)
extended %>% filter(layer_from!=layer_to)
inter <- extended %>% filter(layer_from!=layer_to)
inter
length(inter)
nrow(inter)
# x is  node_metadata must
#
create_multilayer_object <- function(extended, intra, inter=NULL, nodes, layers){
if (!is.null(extended)){
if (any(!is.null(intra),!is.null(intra))){stop('Cannot provide both extended and intra/inter')}
intra <- extended %>% filter(layer_from==layer_to)
inter <- extended %>% filter(layer_from!=layer_to)
if (nrow(inter)==0){inter <- NULL}
}
out <- list(intra=intra,
inter=inter,
nodes=nodes,
layers=layers)
class(out) <- 'multilayer'
return(out)
}
# x is  node_metadata must
#
create_multilayer_object <- function(extended, intra,=NULL, inter=NULL, nodes=NULL, layers=NULL){
if (!is.null(extended)){
if (any(!is.null(intra),!is.null(intra))){stop('Cannot provide both extended and intra/inter')}
intra <- extended %>% filter(layer_from==layer_to)
inter <- extended %>% filter(layer_from!=layer_to)
if (nrow(inter)==0){inter <- NULL}
}
out <- list(intra=intra,
inter=inter,
nodes=nodes,
layers=layers)
class(out) <- 'multilayer'
return(out)
}
# x is  node_metadata must
#
create_multilayer_object <- function(extended, intra,=NULL, inter=NULL, nodes=NULL, layers=NULL){
if (!is.null(extended)){
if (any(!is.null(intra),!is.null(intra))){stop('Cannot provide both extended and intra/inter')}
intra <- extended %>% filter(layer_from==layer_to)
inter <- extended %>% filter(layer_from!=layer_to)
if (nrow(inter)==0){inter <- NULL}
}
out <- list(intra=intra,
inter=inter,
nodes=nodes,
layers=layers)
class(out) <- 'multilayer'
return(out)
}
# x is  node_metadata must
#
create_multilayer_object <- function(extended, intra=NULL, inter=NULL, nodes=NULL, layers=NULL){
if (!is.null(extended)){
if (any(!is.null(intra),!is.null(intra))){stop('Cannot provide both extended and intra/inter')}
intra <- extended %>% filter(layer_from==layer_to)
inter <- extended %>% filter(layer_from!=layer_to)
if (nrow(inter)==0){inter <- NULL}
}
out <- list(intra=intra,
inter=inter,
nodes=nodes,
layers=layers)
class(out) <- 'multilayer'
return(out)
}
read_delim('NEE2017_multilayer_full_list.txt')
#Run infomap
create_multilayer_object(
extended = read_delim('NEE2017_multilayer_full_list.txt', delim = ' ', col_names = c('layer_from', 'node_from', 'layer_to', 'node_to', 'weight')),
nodes = read_csv("NEE2017_nodes.csv"))
intra=tibble(layer=1, node_from=3, node_to=4, weight=0.5)
intra
intra %<>% select(layer_from=layer, node_from, layer_to=layer, node_to, weight)
intra
x='Infomap'
out <- attempt(system(paste('./',x,' -V',sep='')), msg = 'Infomap not installed correctly. See www.mapequation.org for instructions on how to install.')
out
check_infomap <- function(x='Infomap'){
out <- attempt(system(paste('./',x,' -V',sep='')), msg = 'Infomap not installed correctly. See www.mapequation.org for instructions on how to install.')
if (out==0) {
return(T)
} else {
return(F)
}
}
check_infomap()
devtools::document()
devtools::document()
library(igraph)
library(bipartite)
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggalluvial)
library(infomapecology)
library(infomapecology)
# Simple bipartite network ------------------------------------------------
network_object <- create_network_object(memmott1999, bipartite = T, directed = F, group_names = c('A','P'))
infomap_input <- create_infomap_linklist(network_object)
run_infomap_link_list
devtools::document()
library(infomapecology)
library(infomapecology)
warnings()
devtools::document()
