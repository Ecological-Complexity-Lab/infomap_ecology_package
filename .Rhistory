separate(path, into=paste('module_level',1:(num_levels+1),sep=''), sep = ':') %>%
mutate_all(as.integer)
# Get the modules
modules %>%
select(node_id, path) %>%
mutate(levels=str_count(path, pattern  = ':') ) %>%
select(node_id, levels, path) %>%
separate(path, into=paste('module_level',1:(num_levels+1),sep=''), sep = ':') %>%
mutate_all(as.integer) %>%
full_join(x$nodes)
# Get the modules
modules %>%
select(node_id, path) %>%
mutate(levels=str_count(path, pattern  = ':') ) %>%
select(node_id, levels, path) %>%
separate(path, into=paste('module_level',1:(num_levels+1),sep=''), sep = ':') %>%
mutate_all(as.integer) %>%
full_join(x$nodes, 'node_id') %>%
select(node_id, node_name, levels, starts_with('module_level'), everything()) %>%
arrange(node_id)
devtools::document()
library(infomapecology)
library(igraph)
library(bipartite)
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggalluvial)
library(infomapecology)
# Directed food web with hierarchical clustering --------------------------
# Prepare data
data(otago_nodes)
data(otago_links)
otago_nodes %<>%
filter(StageID==1) %>%
select(node_name=WorkingName, node_id_original=NodeID, WorkingName,StageID, everything())
anyDuplicated(otago_nodes$node_name)
otago_links %<>%
filter(ConsumerSpecies.StageID==1) %>%
filter(ResourceSpecies.StageID==1) %>%
select(from=ResourceNodeID, to=ConsumerNodeID) %>%
left_join(otago_nodes, by=c('from'='node_id_original')) %>%
select(from, node_name, to) %>%
left_join(otago_nodes, by=c('to'='node_id_original')) %>%
select(from=node_name.x, to=node_name.y) %>%
mutate(weight=1)
# Prepare network objects and run infomap
network_object <- create_monolayer_object(otago_links, directed = T, bipartite = F, node_metadata = otago_nodes)
infomap_input <- create_infomap_linklist(network_object)
infomap_object <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=F, seed=200952)
infomap_object
infomap_object$modules %>%
select(node_id, node_name, module_level1, module_level2,module_level3, OrganismalGroup, NodeType) %>%
arrange(module_level1, module_level2,module_level3)
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
library(igraph)
library(bipartite)
library(tidyverse)
library(magrittr)
library(cowplot)
library(ggalluvial)
library(infomapecology)
# Simple bipartite network ------------------------------------------------
network_object <- create_network_object(memmott1999, bipartite = T, directed = F, group_names = c('A','P'))
# Simple bipartite network ------------------------------------------------
network_object <- create_monolayer_object(memmott1999, bipartite = T, directed = F, group_names = c('A','P'))
infomap_input <- create_infomap_linklist(network_object)
infomap_object <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
flow_model = 'undirected',
silent=T, trials=20, two_level=T, seed=123)
# Directed food web with hierarchical clustering --------------------------
# Prepare data
data(otago_nodes)
data(otago_links)
otago_nodes %<>%
filter(StageID==1) %>%
select(node_name=WorkingName, node_id_original=NodeID, WorkingName,StageID, everything())
anyDuplicated(otago_nodes$node_name)
otago_links %<>%
filter(ConsumerSpecies.StageID==1) %>%
filter(ResourceSpecies.StageID==1) %>%
select(from=ResourceNodeID, to=ConsumerNodeID) %>%
left_join(otago_nodes, by=c('from'='node_id_original')) %>%
select(from, node_name, to) %>%
left_join(otago_nodes, by=c('to'='node_id_original')) %>%
select(from=node_name.x, to=node_name.y) %>%
mutate(weight=1)
# Prepare network objects and run infomap
network_object <- create_monolayer_object(otago_links, directed = T, bipartite = F, node_metadata = otago_nodes)
infomap_input <- create_infomap_linklist(network_object)
infomap_object <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=F, seed=200952)
infomap_object$modules %>%
select(node_id, node_name, module_level1, module_level2,module_level3, OrganismalGroup, NodeType) %>%
arrange(module_level1, module_level2,module_level3) %>%
write_delim('otago_modules.txt', delim = '|')
# Create an attribute -- attribute ID map
node_attribute_map <- otago_nodes %>% distinct(OrganismalGroup) %>%
mutate(attribute_id=1:n())
# Create a file with node attributes
node_attributes <-
infomap_input$nodes %>%
distinct(node_id, OrganismalGroup) %>%
left_join(node_attribute_map) %>%
select(-OrganismalGroup) %>%
write_delim('otago_node_attributes.txt', delim = ' ', col_names = F)
# Run without metadata
infomap_object <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952)
# Run with metadata and eta=0.7
infomap_object_metadata_07 <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952,
'--meta-data otago_node_attributes.txt --meta-data-rate 0.7')
# Run with metadata and eta=1.3
infomap_object_metadata_13 <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952,
'--meta-data otago_node_attributes.txt --meta-data-rate 1.3')
# Compare the modules with and without metadata
x <- infomap_object$module_affiliation %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=0) %>%
arrange(desc(n), module_level1)
y <- infomap_object_metadata_07$module_affiliation %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=0.7) %>%
arrange(desc(n), module_level1)
z <- infomap_object_metadata_13$module_affiliation %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=1.25) %>%
arrange(desc(n), module_level1)
# Create an attribute -- attribute ID map
node_attribute_map <- otago_nodes %>% distinct(OrganismalGroup) %>%
mutate(attribute_id=1:n())
# Create a file with node attributes
node_attributes <-
infomap_input$nodes %>%
distinct(node_id, OrganismalGroup) %>%
left_join(node_attribute_map) %>%
select(-OrganismalGroup) %>%
write_delim('otago_node_attributes.txt', delim = ' ', col_names = F)
# Run without metadata
infomap_object <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952)
# Run with metadata and eta=0.7
infomap_object_metadata_07 <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952,
'--meta-data otago_node_attributes.txt --meta-data-rate 0.7')
# Run with metadata and eta=1.3
infomap_object_metadata_13 <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=20, two_level=T, seed=200952,
'--meta-data otago_node_attributes.txt --meta-data-rate 1.3')
# Compare the modules with and without metadata
x <- infomap_object$modules %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=0) %>%
arrange(desc(n), module_level1)
y <- infomap_object_metadata_07$modules %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=0.7) %>%
arrange(desc(n), module_level1)
z <- infomap_object_metadata_13$modules %>%
group_by(module_level1) %>%
summarise(n=n_distinct(OrganismalGroup)) %>%
mutate(eta=1.25) %>%
arrange(desc(n), module_level1)
bind_rows(x,y, z) %>% ggplot(aes(n, fill=as.factor(eta)))+geom_histogram(position = 'dodge')+
scale_fill_manual(values = c('purple','orange','brown'))+
labs(x='Number of organismal groups', y='Number of modules', fill='eta')+
theme(legend.position = c(0.8,0.8),
legend.text = element_text(size=20),
legend.title = element_text(size=20),
axis.text = element_text(size=30),
text=element_text(size=30))
num_mods <- max(infomap_object$modules$module_level1)
num_mods_metadata_07 <- max(infomap_object_metadata_07$modules$module_level1)
cowplot::plot_grid(
infomap_object$modules %>% group_by(module_level1, OrganismalGroup) %>% arrange(module_level1, OrganismalGroup) %>%
count() %>%
ggplot(aes(module_level1, OrganismalGroup, size=n))+geom_point(color='purple')+
scale_size_area(max_size = 20)+
scale_x_continuous(breaks = 1:num_mods)+
labs(x='Module ID', y='Guild', title='Eta=0')+
theme(legend.position = 'none'),
infomap_object_metadata_07$modules %>% group_by(module_level1, OrganismalGroup) %>% arrange(module_level1, OrganismalGroup) %>%
count() %>%
ggplot(aes(module_level1, OrganismalGroup, size=n))+
geom_point(color='orange')+
scale_size_area(max_size = 20)+
labs(x='Module ID', y='Guild', title='Eta=0.7')+
scale_x_continuous(breaks = seq(1,num_mods_metadata_07,3))+
theme(legend.position = 'none'),
align = 'vh')
# Pollination transfer network --------------------------------------------
data(tur2016)
tur2016_altitude <- tur2016 %>% filter(altitude==2000) %>% select(from=donor,to=receptor,weight=no.grains)
network_object <- create_network_object(tur2016_altitude, directed = T, bipartite = F)
# Pollination transfer network --------------------------------------------
data(tur2016)
tur2016_altitude <- tur2016 %>% filter(altitude==2000) %>% select(from=donor,to=receptor,weight=no.grains)
network_object <- create_monolayer_object(tur2016_altitude, directed = T, bipartite = F)
infomap_input <- create_infomap_linklist(network_object)
res_dir <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
res_rawdir <- run_infomap_monolayer(infomap_input, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'rawdir',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
res_dir <- res_dir$modules
res_rawdir <- res_rawdir$modules
# Compare the results
N <- res_dir %>% # Create confusion matrix
select(-module_level2) %>%
inner_join(res_rawdir %>% select(node_id,module_level1), by='node_id') %>%
arrange(module_level1.x,module_level1.y) %>%
group_by(module_level1.y) %>% select(module_level1.x) %>% table()
N
# These two different modes of flow can result in different partitions.
NMI(N)
res_dir %>%
select(-module_level2) %>%
inner_join(res_rawdir %>% select(node_id,module_level1), by='node_id') %>%
arrange(module_level1.x,module_level1.y) %>%
group_by(module_level1.x,module_level1.y) %>% count() %>%
ggplot()+geom_point(aes(module_level1.x, module_level1.y, color=n), size=15)+scale_color_viridis_c()+
scale_x_continuous(breaks=1:max(res_dir$module_level1))+
scale_y_continuous(breaks=1:max(res_rawdir$module_level1))+
labs(x='Module ID directed model', y='Module ID rawdir model')+
theme_bw()+theme(text=element_text(size=30), panel.grid.minor = element_blank())
# Plot the networks
gg_color_hue <- function(n, hue_min = 10, hue_max = 280, tune1 = 62, tune2 = 100) {
hues = seq(hue_min, hue_max, length=n+1)
hcl(h=hues, l=tune1, c=tune2)[1:n]
}
mod_cols <- tibble(module_level1=sort(unique(res_dir$module_level1)), col=gg_color_hue(max(as.integer(res_dir$module_level1))))
res_dir %<>% left_join(mod_cols)
g <- network_object$igraph_object
all(V(g)$name==res_dir$node_name)
V(g)$node_id <- res_dir$node_id
V(g)$col <- res_dir$col
V(g)$membership <- res_dir$module_level1
plot(network_object$igraph_object, vertex.label=NA, edge.color='black',
edge.width=log(E(g)$weight+1),
vertex.color=V(g)$col, layout=layout.circle, main='directed')
mod_cols <- tibble(module_level1=sort(unique(res_rawdir$module_level1)), col=gg_color_hue(max(as.integer(res_rawdir$module_level1))))
res_rawdir %<>% left_join(mod_cols)
g <- network_object$igraph_object
all(V(g)$name==res_rawdir$node_name)
V(g)$node_id <- res_rawdir$node_id
V(g)$col <- res_rawdir$col
V(g)$membership <- res_rawdir$module_level1
plot(network_object$igraph_object, vertex.label=NA, edge.color='black',
edge.width=log(E(g)$weight+1),
vertex.color=V(g)$col, layout=layout.circle, main='rawdir')
#Run infomap
NEE2017 <- create_multilayer_object(extended = read_delim('NEE2017_multilayer_full_list.txt', delim = ' ', col_names = c('layer_from', 'node_from', 'layer_to', 'node_to', 'weight')),
nodes = read_csv("NEE2017_nodes.csv"))
NEE2017_modules <- run_infomap_multilayer(M=NEE2017, relax = F, flow_model = 'directed', silent = T, trials = 100, seed = 497294, temporal_network = T)
#Module persistance
modules_persistence <- NEE2017_modules$modules %>%
group_by(module) %>%
summarise(b=min(layer_id), d=max(layer_id), persistence=d-b+1) %>%
count(persistence) %>%
mutate(percent=(n/max(new_interlayer_modules$module))*100)
#Module persistance
modules_persistence <- NEE2017_modules$modules %>%
group_by(module) %>%
summarise(b=min(layer_id), d=max(layer_id), persistence=d-b+1) %>%
count(persistence) %>%
mutate(percent=(n/max(new_interlayer_modules$module))*100)
#Module persistance
modules_persistence <- NEE2017_modules$modules %>%
group_by(module) %>%
summarise(b=min(layer_id), d=max(layer_id), persistence=d-b+1) %>%
count(persistence) %>%
mutate(percent=(n/max(NEE2017_modules$module))*100)
NEE2017_modules$module
#Module persistance
modules_persistence <- NEE2017_modules$modules %>%
group_by(module) %>%
summarise(b=min(layer_id), d=max(layer_id), persistence=d-b+1) %>%
count(persistence) %>%
mutate(percent=(n/max(NEE2017_modules$module$module))*100)
modules_persistence
#Percent of species that switched modules at least once:
module_switch <- NEE2017_modules$modules%>%
group_by(species, module) %>%
summarise() %>%
group_by(species) %>%
summarise(n_modules=n()) %>%
mutate(switches=ifelse(n_modules>1, T, F))
count(module_switch, switches==T) %>%
mutate(percent=(n/length(module_switch$species)*100))
#plots:
#1. Modules' persistence
fig1 <- NEE2017_modules$modules %>%
group_by(module) %>%
summarise(b=min(layer_id), d=max(layer_id), persistence=d-b+1, size=n_distinct(node_id)) %>%
ggplot() +
geom_rect(aes(xmin=b, xmax=d+0.05, ymin=module, ymax=module+0.5, fill=size))+
scale_x_continuous(breaks=seq(0,6,1))+
scale_y_continuous(breaks=seq(0,40,5))+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size=20),
axis.text = element_text(size = 20),
legend.text =  element_text(size=15),
legend.title = element_text(size=20))+
labs(x='Layer', y='Module ID', fill='Module size')
#2. Species flow through modules
fig2 <- ggplot(NEE2017_modules$modules,
aes(x=layer_id, stratum=as.factor(module),
alluvium=node_id,
label=as.factor(module),
fill=as.factor(module))) +
geom_flow(stat = "alluvium",
lode.guidance = "frontback",
color =  "darkgray")+
geom_stratum() +
scale_x_continuous(breaks=seq(0,6,1))+
scale_y_continuous(breaks=seq(0,70,5))+
labs(x='Layer', y='Number of species')+
theme_bw()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(color='black', size = 20),
axis.title = element_text(size=20))
interlayer_grid <- cowplot::plot_grid(fig1, fig2 ,ncol = 2, rel_widths = c(5,4), labels = "AUTO", label_size = 20)
interlayer_grid
cowplot::plot_grid(fig1, fig2 ,ncol = 2, rel_widths = c(5,4), labels = "AUTO", label_size = 20)
pdf('interlayer_grid.pdf',12,8)
interlayer_grid <- cowplot::plot_grid(fig1, fig2 ,ncol = 2, rel_widths = c(5,4), labels = "AUTO", label_size = 20)
dev.off()
fig1
fig2
plot_grid(fig1, fig2 ,ncol = 2, rel_widths = c(5,4), labels = "AUTO", label_size = 20)
cowplot::plot_grid(fig1, fig2, ncol = 2, rel_widths = c(0.6,0.4), labels = "AUTO", label_size = 20)
pdf('interlayer_grid.pdf',12,8)
interlayer_grid <- cowplot::plot_grid(fig1, fig2, ncol = 2, rel_widths = c(0.6,0.4), labels = "AUTO", label_size = 20)
dev.off()
pdf('interlayer_grid.pdf',12,8)
interlayer_grid <- cowplot::plot_grid(fig1, fig2, ncol = 2, rel_widths = c(0.6,0.4), labels = "AUTO", label_size = 20)
dev.off()
NEE2017 <- create_multilayer_object(extended = read_delim('NEE2017_multilayer_full_list.txt', delim = ' ', col_names = c('layer_from', 'node_from', 'layer_to', 'node_to', 'weight')),
nodes = read_csv("NEE2017_nodes.csv"), intra_output_extended = F, inter_output_extended = F)
NEE2017$inter <- NULL # Ignore interlayer edges
#Run Infomap and return the network's modular structure at increasing relax-rates.
relaxrate_modules <- NULL
for (r in seq(0,1, by = 0.1)){
print(r)
modules_relax_rate <- run_infomap_multilayer(NEE2017, relax = T, silent = T, trials = 50, seed = 497294, multilayer_relax_rate = r, multilayer_relax_limit_up = 1, multilayer_relax_limit_down = 0, temporal_network = T)
modules_relax_rate$modules$relax_rate <- r
relaxrate_modules <- rbind(relaxrate_modules, modules_relax_rate$modules)
}
#plots
#1. Number of modules
fig3 <- relaxrate_modules %>%
group_by(relax_rate, module) %>%
summarise()%>%
mutate(n_modules=length(relax_rate)) %>%
group_by(relax_rate, n_modules) %>%
summarise() %>%
ggplot() +
geom_line(aes(x = relax_rate, y=n_modules)) +
geom_point(aes(x = relax_rate, y=n_modules))+
scale_y_continuous(breaks=1:18, labels = 1:18, limits = c(1,18))+
scale_x_continuous(breaks=seq(0,1,0.2))+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size=15),
axis.text = element_text(size = 15))+
labs(x='Relax rate', y='Number of modules')
#2. Module presistence
presistence <- relaxrate_modules %>%
group_by(relax_rate, module, layer_id) %>%
summarise(n_species=n()) %>%
group_by(relax_rate, module) %>%
summarise(n_layers=n()) %>%
ungroup()
avarage_presistance <- presistence %>%
group_by(relax_rate) %>%
mutate(avarage=mean(n_layers)) %>%
group_by(relax_rate, avarage) %>%
summarise()
avarage_presistance
fig4 <- ggplot()+
geom_boxplot(data =  presistence, aes(x=relax_rate, y=n_layers, group=relax_rate))+
geom_line(data =  avarage_presistance, aes(x=relax_rate, y=avarage, color="red"))+
geom_point(data =  avarage_presistance, aes(x=relax_rate, y=avarage, color="red"))+
scale_y_continuous(breaks=seq(0,6,1))+
scale_x_continuous(breaks=seq(0,1,0.2))+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size=15),
axis.text = element_text(size = 15),
legend.position = 'none')+
labs(x='Relax rate', y='Module persistence')
#3. Species flexibility
fig5 <- relaxrate_modules %>%
group_by(relax_rate, species) %>%
distinct(module) %>%
summarise(n_modules=n()) %>%
group_by(relax_rate, n_modules) %>%
summarise(num_species=n())%>%
mutate(precent=(num_species/78)*100) %>%
ggplot()+
geom_col(aes(x=relax_rate, y=precent, fill=n_modules))+
scale_x_continuous(breaks=seq(0,1,0.2))+
scale_y_continuous(labels = function(x) paste0(x, "%"))+
scale_fill_viridis_c()+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size=15),
axis.text = element_text(size = 15),
legend.text =  element_text(size=10),
legend.title = element_text(size=15))+
labs(x='Relax rate', y='Percent of all species', fill="Number of modules")
relaxrate_grid <- cowplot::plot_grid(fig3, fig4, fig5, ncol = 3, rel_widths = c(2,2,3), labels = "AUTO", label_size = 20)
relaxrate_grid
# Hypothesis testing ------------------------------------------------------
tur2016_altitude <- tur2016 %>% filter(altitude==1800) %>% select(from=donor,to=receptor,weight=no.grains)
network_object_observed <- create_monolayer_object(tur2016_altitude, directed = T, bipartite = F)
infomap_input_observed <- create_infomap_linklist(network_object_observed)
results_observed <- run_infomap_monolayer(infomap_input_observed, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
shuffle_tur_networks <- function(x){ # x is a network object
m <- x$mat
# Assign off-diagona values
off_diagonal_lower <- m[lower.tri(m, diag = FALSE)]
off_diagonal_upper <- m[upper.tri(m, diag = FALSE)]
out <- matrix(0, nrow(m), ncol(m), dimnames = list(rownames(m), colnames(m)))
out[lower.tri(out, diag = FALSE)] <- sample(off_diagonal_lower, size = length(off_diagonal_lower), replace = F)
out[upper.tri(out, diag = FALSE)] <- sample(off_diagonal_upper, size = length(off_diagonal_upper), replace = F)
# Re-assign the diagonal (left intact)
diag(out) <- diag(m)
# Sanity checks
t1 <- setequal(out[upper.tri(out, diag = FALSE)], m[upper.tri(m, diag = FALSE)]) #Should be TRUE
t2 <- setequal(out[lower.tri(out, diag = FALSE)], m[lower.tri(m, diag = FALSE)]) #Should be TRUE
t3 <- identical(out[upper.tri(out, diag = FALSE)], m[upper.tri(m, diag = FALSE)]) #Should be FALSE
t4 <- identical(out[lower.tri(out, diag = FALSE)], m[lower.tri(m, diag = FALSE)]) #Should be FALSE
t5 <- all(table(m)==table(out))# Should be TRUE because it includes all the values, including diagonal
if (any(c(t1,t2,!t3,!t4,t5)==F)){stop('One or more sanity checks failed')}
return(out)
}
nsim <- 1000
nsim <- 100
results_shuffled <- NULL
for (i in 1:nsim){
print(i)
#Shuffle trhe network
shuffled <- shuffle_tur_networks(network_object_observed)
# Run Infomap
network_object_simulated <- create_monolayer_object(shuffled, directed = T, bipartite = F)
infomap_input_simulated <- create_infomap_linklist(network_object_simulated)
results_simulated <- run_infomap_monolayer(infomap_input_simulated, infomap_executable='Infomap',
input_file = NULL,
flow_model = 'directed',
silent=T,trials=100, two_level=T, seed=200952, '-k --ftree --markov-time 50')
results_shuffled %<>% bind_rows(tibble(run=i, L=results_simulated$L, M=max(results_simulated$modules$module_level1)))
}
M_obs <- max(results_observed$modules$module_level1)
sum(results_shuffled$L<results_observed$L)/nsim # P value for L
sum(results_shuffled$M>M_obs)/nsim # P value for M
cowplot::plot_grid(
ggplot(results_shuffled, aes(L))+
geom_histogram(fill='#549584')+
geom_vline(xintercept = results_observed$L, color='blue')+
labs(x='Map equation (in bits)', y='Number of randomized networks'),
ggplot(results_shuffled, aes(M))+
geom_histogram(fill='#549584')+
geom_vline(xintercept = M_obs, color='blue')+
labs(x='Number of modules', y='')+
scale_x_continuous(breaks = 1:M_obs),
labels = c('(a)', '(b)'), align = 'vh')
devtools::document()
library(infomapecology)
devtools::document()
library(infomapecology)
